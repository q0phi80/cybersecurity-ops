# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
	#config.gui = true
	
	## WINDOWS SERVER 2022
	######################################
	config.vm.synced_folder '.', '/vagrant', disabled: true
	config.vm.define "win22" do |win22|
    # Base configuration for the VM and provisioner
    win22.vm.box = "gusztavvargadr/windows-server"
    win22.vm.hostname = "DC01"
    win22.vm.communicator = "winrm"
    config.winrm.timeout =   1800 # 30 minutes
	config.vm.boot_timeout = 1800 # 30 minutes
	#win22.winrm.retry_limit = 600
    #win22.winrm.retry_delay = 10
	
	win22.vm.disk :disk, size: "40B", primary: true
	
	# win22.vm.network "private_network", ip: '10.0.2.10'
	win22.vm.network :private_network, ip: "192.168.40.2", gateway: "192.168.40.1", dns: "8.8.8.8"
	
	# Provision scripts
	win22.vm.provision "shell", privileged: "true", powershell_elevated_interactive: "true", inline: <<-SHELL

       Set-NetFirewallProfile -Profile Domain, Public, Private -Enabled False 
	   Set-MpPreference -DisableRealtimeMonitoring $true
	   Set-MpPreference -SubmitSamplesConsent NeverSend
	   Set-MpPreference -MAPSReporting Disable
	   Set-StrictMode -Version Latest

 Try
 {
	 # Remove all Apps not published by Microsoft. 
	 Get-AppxPackage | Where-Object -FilterScript {$_.Publisher -notlike "*Microsoft Corporation*"} | Remove-AppxPackage -ErrorAction SilentlyContinue | Remove-AppxProvisionedPackage -Online -ErrorAction SilentlyContinue

	 # Remove Unnecessary Apps 
	 $AppBanStrings =@(
		 "Microsoft.Bing*",
		 "Microsoft.Xbox*",
		 "Microsoft.Zune*",
		 "Microsoft.Office*",
		 "Microsoft.Skype*",
		 "Microsoft.Wallet*",
		 "Microsoft.Weather*",
		 "Microsoft.3DBuilder*",
	     "Microsoft.WindowsMaps*",
	     "Microsoft.MicrosoftOfficeHub*",
		 "Microsoft.NetworkSpeedTest*",
		 "Microsoft.MicrosoftSolitaireCollection*",
	     "Microsoft.MicrosoftPowerBIForWindows*",
	     "Microsoft.Messaging*",
	     "Microsoft.People*",
	     "Microsoft.WindowsFeedbackHub*",
	     "Microsoft.Getstarted*",
	     "Microsoft.Windows.Photos*",
	     "Microsoft.Microsoft3DViewer*",
		 "Microsoft.WindowsAlarms*",
		 "Microsoft.Advertising*",
		 "Microsoft.Print3D*",
		 "Microsoft.FreshPaint*",
		 "Microsoft.RemoteDesktop*")

	 # Iterate through the apps with a banned string
	 Foreach ($AppString in $AppBanStrings)
	{
		# Remove the application
		Get-AppxPackage -Name $AppString | Remove-AppxPackage  -ErrorAction SilentlyContinue | Remove-AppxProvisionedPackage -Online -ErrorAction SilentlyContinue
	}
 }
 Catch
 {
	 Write-Error "Could not remove an application. Exiting."
	 Write-Host $_.Exception | format-list -force
	Exit 1
 }

 Try
 {
	 # Remove OneDrive
	 # Stop OneDrive processes
	 Stop-Process -Name "*OneDrive*" -Force | Out-Null

	 # Run the OneDrive Uninstaller 
	 Start-Process -FilePath "$Env:SystemDrive\Windows\SysWOW64\OneDriveSetup.exe" -ArgumentList "/uninstall"  -Wait -NoNewWindow

	 # Prevent OneDrive Sync via Registry
	 $RegistryKeyPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\OneDrive"
	 If (-not(Test-Path -Path $RegistryKeyPath)) 
	 {
		 New-Item -Path $RegistryKeyPath -ItemType Directory -Force | Out-Null
	 }
	 New-ItemProperty -Path $RegistryKeyPath -Name DisableFileSyncNGSC -PropertyType DWord -Value 1 -Force | Out-Null
 }
 Catch
 {
	 Write-Error "Could not remove OneDrive. Exiting."
	 Write-Host $_.Exception | format-list -force
	Exit 1
 }
	   
	SHELL

    win22.vm.provider "libvirt" do |v|
      v.memory = 2048
      v.cpus = 2
      v.video_type = 'qxl'
      v.input :type => "tablet", :bus => "usb"
      v.channel :type => 'unix', :target_name => 'org.qemu.guest_agent.0', :target_type => 'virtio'
      v.channel :type => 'spicevmc', :target_name => 'com.redhat.spice.0', :target_type => 'virtio'
      v.graphics_type = "spice"

      # Enable Hyper-V enlightenments: https://blog.wikichoon.com/2014/07/enabling-hyper-v-enlightenments-with-kvm.html
      v.hyperv_feature :name => 'stimer',  :state => 'on'
      v.hyperv_feature :name => 'relaxed', :state => 'on'
      v.hyperv_feature :name => 'vapic',   :state => 'on'
      v.hyperv_feature :name => 'synic',   :state => 'on'
    end

    win22.vm.provider "virtualbox" do |v|
      v.name = "DC01"
	  v.memory = 2048
      v.cpus = 2
    end
end

	## WINDOWS 10
	#########################################
	config.vm.define "win10" do |win10|
		#win10.gui = true
		win10.vm.box = "gusztavvargadr/windows-10"
		win10.vm.hostname = "Windows10"
		config.winrm.timeout =   1800 # 30 minutes
		config.vm.boot_timeout = 1800 # 30 minutes
		#win10.winrm.retry_limit = 600
		#win10.winrm.retry_delay = 10
		
		win10.vm.disk :disk, size: "40B", primary: true
		
		# win10.vm.network "private_network", ip: '10.0.2.11'
		win10.vm.network :private_network, ip: "192.168.40.4", gateway: "192.168.40.1", dns: "8.8.8.8"
		
		# Provision scripts
	win10.vm.provision "shell", privileged: "true", powershell_elevated_interactive: "true", inline: <<-SHELL

       Set-NetFirewallProfile -Profile Domain, Public, Private -Enabled False 
	   Set-MpPreference -DisableRealtimeMonitoring $true
	   Set-MpPreference -SubmitSamplesConsent NeverSend
	   Set-MpPreference -MAPSReporting Disable
	SHELL
		    
	win10.vm.provider "virtualbox" do |v|
		v.name = "Win10"
		v.memory = 2048
    end
  end
  
  ## METASPLOITABLE 3 UBUNTU
  ###########################################
  #config.vm.synced_folder '.', '/vagrant', disabled: true
  config.vm.define "ub1404" do |ub1404|
    ub1404.vm.box = "rapid7/metasploitable3-ub1404"
    ub1404.vm.hostname = "Met"
    config.ssh.username = 'vagrant'
    config.ssh.password = 'vagrant'
	
	ub1404.vm.disk :disk, size: "25B", primary: true

	ub1404.vm.network :private_network, ip: "192.168.40.5", gateway: "192.168.40.1", dns: "8.8.8.8"

    ub1404.vm.provider "virtualbox" do |v|
      v.name = "Met"
      v.memory = 1024
    end
  end
  
  ## METASPLOITABLE 2
  #config.vm.synced_folder '.', '/vagrant', disabled: true
  config.vm.define "met2" do |met2|
    met2.vm.box = "e314c/Metasploitable2"
    met2.vm.hostname = "Met2"
    config.ssh.username = 'vagrant'
    config.ssh.password = 'vagrant'
	
	met2.vm.disk :disk, size: "25B", primary: true

	met2.vm.network :private_network, ip: "192.168.40.6", gateway: "192.168.40.1", dns: "8.8.8.8"

    met2.vm.provider "virtualbox" do |v|
      v.name = "Met2"
      v.memory = 1024
    end
  end

  ## METASPLOITABLE 3 WINDOWS 2k8
  #####################################
  config.vm.define "win2k8" do |win2k8|
    # Base configuration for the VM and provisioner
    win2k8.vm.box = "rapid7/metasploitable3-win2k8"
    win2k8.vm.hostname = "Win2k8"
    win2k8.vm.communicator = "winrm"
    win2k8.winrm.retry_limit = 60
    win2k8.winrm.retry_delay = 10
	
	win2k8.vm.disk :disk, size: "40B", primary: true

    # win2k8.vm.network "private_network", ip: '10.0.2.101'
	win2k8.vm.network :private_network, ip: "192.168.40.3", gateway: "192.168.40.1", dns: "8.8.8.8"

    win2k8.vm.provider "libvirt" do |v|
      v.name = "Win2k8"
	  v.memory = 2048
      v.cpus = 2
      v.video_type = 'qxl'
      v.input :type => "tablet", :bus => "usb"
      v.channel :type => 'unix', :target_name => 'org.qemu.guest_agent.0', :target_type => 'virtio'
      v.channel :type => 'spicevmc', :target_name => 'com.redhat.spice.0', :target_type => 'virtio'
      v.graphics_type = "spice"

      # Enable Hyper-V enlightenments: https://blog.wikichoon.com/2014/07/enabling-hyper-v-enlightenments-with-kvm.html
      v.hyperv_feature :name => 'stimer',  :state => 'on'
      v.hyperv_feature :name => 'relaxed', :state => 'on'
      v.hyperv_feature :name => 'vapic',   :state => 'on'
      v.hyperv_feature :name => 'synic',   :state => 'on'
    end

    # Insecure share from the Linux machine
    win2k8.vm.provision :shell, inline: "C:\\startup\\install_share_autorun.bat"
    win2k8.vm.provision :shell, inline: "C:\\startup\\setup_linux_share.bat"
    win2k8.vm.provision :shell, inline: "rm C:\\startup\\*" # Cleanup startup scripts
  end
  
  ## Kali
  ######################################################
  #config.vm.synced_folder '.', '/vagrant', disabled: true
  config.vm.define "Kali" do |kali|
    kali.vm.box = "kalilinux/rolling"
    kali.vm.hostname = "Kali"
	
	kali.vm.disk :disk, size: "50B", primary: true
	
	# kali.vm.network "private_network", ip: '10.0.2.200'
	kali.vm.network :private_network, ip: "192.168.40.200", gateway: "192.168.40.1", dns: "8.8.8.8"
    
    kali.vm.provider "virtualbox" do |v|
      v.name = "Kali"
      v.memory = 2048
	  v.cpus = 2
    end
  end
end
