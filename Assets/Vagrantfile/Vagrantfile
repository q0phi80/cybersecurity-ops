# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
	#config.gui = true
	
	## WINDOWS SERVER 2022
	######################################
	config.vm.synced_folder '.', '/vagrant', disabled: true
	config.vm.define "win22" do |win22|
    # Base configuration for the VM and provisioner
    win22.vm.box = "gusztavvargadr/windows-server"
    win22.vm.hostname = "DC01"
    win22.vm.communicator = "winrm"
    config.winrm.timeout =   1800 # 30 minutes
	config.vm.boot_timeout = 1800 # 30 minutes
	#win22.winrm.retry_limit = 600
    #win22.winrm.retry_delay = 10
	
	win22.vm.disk :disk, size: "40B", primary: true
	
	# win22.vm.network "private_network", ip: '10.0.2.10'
	win22.vm.network :private_network, ip: "192.168.40.2", gateway: "192.168.40.1", dns: "8.8.8.8"
	
	# Provision scripts
	win22.vm.provision "shell", privileged: "true", powershell_elevated_interactive: "true", inline: <<-SHELL

		Set-NetFirewallProfile -Profile Domain, Public, Private -Enabled False 
		Set-MpPreference -DisableRealtimeMonitoring $true
		Set-MpPreference -SubmitSamplesConsent NeverSend
		Set-MpPreference -MAPSReporting Disable
		
	SHELL

    win22.vm.provider "libvirt" do |v|
      v.memory = 2048
      v.cpus = 2
      v.video_type = 'qxl'
      v.input :type => "tablet", :bus => "usb"
      v.channel :type => 'unix', :target_name => 'org.qemu.guest_agent.0', :target_type => 'virtio'
      v.channel :type => 'spicevmc', :target_name => 'com.redhat.spice.0', :target_type => 'virtio'
      v.graphics_type = "spice"

      # Enable Hyper-V enlightenments: https://blog.wikichoon.com/2014/07/enabling-hyper-v-enlightenments-with-kvm.html
      v.hyperv_feature :name => 'stimer',  :state => 'on'
      v.hyperv_feature :name => 'relaxed', :state => 'on'
      v.hyperv_feature :name => 'vapic',   :state => 'on'
      v.hyperv_feature :name => 'synic',   :state => 'on'
    end

    win22.vm.provider "virtualbox" do |v|
      v.name = "DC01"
	  v.memory = 2048
      v.cpus = 2
    end
end

	## WINDOWS 10
	#########################################
	config.vm.define "win10" do |win10|
		#win10.gui = true
		win10.vm.box = "gusztavvargadr/windows-10"
		win10.vm.hostname = "Windows10"
		config.winrm.timeout =   1800 # 30 minutes
		config.vm.boot_timeout = 1800 # 30 minutes
		#win10.winrm.retry_limit = 600
		#win10.winrm.retry_delay = 10
		
		win10.vm.disk :disk, size: "40B", primary: true
		
		# win10.vm.network "private_network", ip: '10.0.2.11'
		win10.vm.network :private_network, ip: "192.168.40.4", gateway: "192.168.40.1", dns: "8.8.8.8"
		
		# Provision scripts
	win10.vm.provision "shell", privileged: "true", powershell_elevated_interactive: "true", inline: <<-SHELL

       		Set-NetFirewallProfile -Profile Domain, Public, Private -Enabled False 
	   	Set-MpPreference -DisableRealtimeMonitoring $true
	   	Set-MpPreference -SubmitSamplesConsent NeverSend
	   	Set-MpPreference -MAPSReporting Disable
	   
	   # Install chocolatey
		Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
		
		# Start-Sleep -Seconds 5
		# Set-ExecutionPolicy Bypass -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/q0phi80/cybersecurity-ops/main/Assets/Vagrantfile/scripts/Win10/Remove-PreInstalledApps.ps1'))
		
		# Start-Sleep -Seconds 5
		# Set-ExecutionPolicy Bypass -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/q0phi80/cybersecurity-ops/main/Assets/Vagrantfile/scripts/Install-Toolz.ps1'))
		
	SHELL
		    
	win10.vm.provider "virtualbox" do |v|
		v.name = "Win10"
		v.memory = 2048
    end
  end
  
  ## UBUNTU 20.04 LTS DESKTOP 
  ###########################################
  #config.vm.synced_folder '.', '/vagrant', disabled: true
  config.vm.define "Ubuntu" do |ubuntu|
    ubuntu.vm.box = "gusztavvargadr/ubuntu-desktop-2004-lts-xfce"
    ubuntu.vm.hostname = "Ubuntu"
    config.ssh.username = 'vagrant'
    config.ssh.password = 'vagrant'
	
	ubuntu.vm.disk :disk, size: "25B", primary: true

	ubuntu.vm.network :private_network, ip: "192.168.40.8", gateway: "192.168.40.1", dns: "8.8.8.8"

    ubuntu.vm.provider "virtualbox" do |v|
      v.name = "Ubuntu"
      v.memory = 1024
    end
  end
  
  ## METASPLOITABLE 3 UBUNTU
  ###########################################
  #config.vm.synced_folder '.', '/vagrant', disabled: true
  config.vm.define "ub1404" do |ub1404|
    ub1404.vm.box = "rapid7/metasploitable3-ub1404"
    ub1404.vm.hostname = "Met"
    config.ssh.username = 'vagrant'
    config.ssh.password = 'vagrant'
	
	ub1404.vm.disk :disk, size: "25B", primary: true

	ub1404.vm.network :private_network, ip: "192.168.40.5", gateway: "192.168.40.1", dns: "8.8.8.8"

    ub1404.vm.provider "virtualbox" do |v|
      v.name = "Met"
      v.memory = 1024
    end
  end

  ## METASPLOITABLE 2
  #config.vm.synced_folder '.', '/vagrant', disabled: true
  config.vm.define "met2" do |met2|
    met2.vm.box = "e314c/Metasploitable2"
    met2.vm.hostname = "Met2"
    config.ssh.username = 'vagrant'
    config.ssh.password = 'vagrant'
	
	met2.vm.disk :disk, size: "25B", primary: true

	met2.vm.network :private_network, ip: "192.168.40.6", gateway: "192.168.40.1", dns: "8.8.8.8"

    met2.vm.provider "virtualbox" do |v|
      v.name = "Met2"
      v.memory = 1024
    end
  end

  ## METASPLOITABLE 3 WINDOWS 2k8
  #####################################
  config.vm.define "win2k8" do |win2k8|
    # Base configuration for the VM and provisioner
    win2k8.vm.box = "rapid7/metasploitable3-win2k8"
    win2k8.vm.hostname = "Win2k8"
    win2k8.vm.communicator = "winrm"
    win2k8.winrm.retry_limit = 60
    win2k8.winrm.retry_delay = 10
	
	win2k8.vm.disk :disk, size: "40B", primary: true

    # win2k8.vm.network "private_network", ip: '10.0.2.101'
	win2k8.vm.network :private_network, ip: "192.168.40.3", gateway: "192.168.40.1", dns: "8.8.8.8"

    win2k8.vm.provider "libvirt" do |v|
      v.name = "Win2k8"
	  v.memory = 2048
      v.cpus = 2
      v.video_type = 'qxl'
      v.input :type => "tablet", :bus => "usb"
      v.channel :type => 'unix', :target_name => 'org.qemu.guest_agent.0', :target_type => 'virtio'
      v.channel :type => 'spicevmc', :target_name => 'com.redhat.spice.0', :target_type => 'virtio'
      v.graphics_type = "spice"

      # Enable Hyper-V enlightenments: https://blog.wikichoon.com/2014/07/enabling-hyper-v-enlightenments-with-kvm.html
      v.hyperv_feature :name => 'stimer',  :state => 'on'
      v.hyperv_feature :name => 'relaxed', :state => 'on'
      v.hyperv_feature :name => 'vapic',   :state => 'on'
      v.hyperv_feature :name => 'synic',   :state => 'on'
    end

    # Insecure share from the Linux machine
    win2k8.vm.provision :shell, inline: "C:\\startup\\install_share_autorun.bat"
    win2k8.vm.provision :shell, inline: "C:\\startup\\setup_linux_share.bat"
    win2k8.vm.provision :shell, inline: "rm C:\\startup\\*" # Cleanup startup scripts
  end
  
  ## Kali
  ######################################################
  #config.vm.synced_folder '.', '/vagrant', disabled: true
  config.vm.define "Kali" do |kali|
    kali.vm.box = "kalilinux/rolling"
    kali.vm.hostname = "Kali"
	
	kali.vm.disk :disk, size: "50B", primary: true
	
	# kali.vm.network "private_network", ip: '10.0.2.200'
	kali.vm.network :private_network, ip: "192.168.40.200", gateway: "192.168.40.1", dns: "8.8.8.8"
    
    kali.vm.provider "virtualbox" do |v|
      v.name = "Kali"
      v.memory = 2048
	  v.cpus = 2
    end
  end
end
